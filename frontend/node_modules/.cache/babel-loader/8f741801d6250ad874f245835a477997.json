{"ast":null,"code":"import axios from \"axios\";\nimport { GET_MEDICAL_RECORD_WITH_ID, SELECTED_RECORD_ID, GET_PATIENT_INFORMATION_WITH_ID, SET_CURRENT_USER, GET_ERRORS, SET_CURRENT_USER_INSURANCE, GET_MEDICAL_RECORD } from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\";\nexport const proxy = \"http://localhost:8080\";\nexport const patientLogin = (userData, history) => dispatch => {\n  // console.log(userData);\n  axios.post(`${proxy}/authenticate`, userData).then(res => {\n    // console.log(res.data);\n    if (res.data.role === \"PATIENT\") {\n      const token = `Bearer ${res.data.jwt}`;\n      const role = res.data.role;\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"userRole\", role);\n      setAuthToken(token);\n      history.push(\"/patient/profile\");\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: {\n          patientLoginError: {\n            data: {\n              message: \"Access Denied\"\n            }\n          }\n        }\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: {\n      patientLoginError: err.response\n    }\n  }));\n}; //gets the current logged in patient\n\nexport const getCurrentPatient = () => dispatch => {\n  axios.get(`${proxy}/getpatientdetails`).then(res => dispatch({\n    type: SET_CURRENT_USER,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err\n  }));\n}; //gets the current logged in patients insurance\n\nexport const getCurrentPatientInsurance = () => dispatch => {\n  axios.get(`${proxy}/getpatientinsurancedetails`).then(res => dispatch({\n    type: SET_CURRENT_USER_INSURANCE,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err\n  }));\n}; // user logoutUser\n\nexport const logoutUser = history => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  localStorage.removeItem(\"userRole\");\n  setAuthToken(false);\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: {}\n  });\n  dispatch({\n    type: GET_ERRORS,\n    payload: {}\n  });\n  history.push(\"/\");\n};\nexport const patientRegister = (userData, history) => dispatch => {\n  axios.post(`${proxy}/register/patientregister`, userData).then(res => history.push(\"/patient/login\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: {\n      patientRegisterError: err.response\n    }\n  }));\n};\nexport const physicianLogin = (userData, history) => dispatch => {\n  // console.log(userData);\n  axios.post(`${proxy}/authenticate`, userData).then(res => {\n    if (res.data.role === \"PHYSICIAN\") {\n      const token = `Bearer ${res.data.jwt}`;\n      const role = res.data.role;\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"userRole\", role);\n      setAuthToken(token);\n      history.push(\"/physician/profile\");\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: {\n          physicianLoginError: {\n            data: {\n              message: \"Access Denied\"\n            }\n          }\n        }\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: {\n      patientLoginError: err.response\n    }\n  }));\n};\nexport const physicianRegister = (userData, history) => dispatch => {\n  // console.log(userData);\n  axios.post(`${proxy}/createPhysician`, userData).then(res => history.push(\"/admin/panel\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: {\n      physicianRegisterError: err.response\n    }\n  }));\n}; // get current physician details\n\nexport const getCurrentPhysician = () => dispatch => {\n  axios.get(`${proxy}/getphysiciandetail`).then(res => dispatch({\n    type: SET_CURRENT_USER,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err\n  }));\n};\nexport const adminLogin = (userData, history) => dispatch => {\n  axios.post(`${proxy}/authenticate`, userData).then(res => {\n    if (res.data.role === \"ADMIN\") {\n      const token = `Bearer ${res.data.jwt}`;\n      const role = res.data.role;\n      localStorage.setItem(\"jwtToken\", token);\n      localStorage.setItem(\"userRole\", role);\n      setAuthToken(token);\n      history.push(\"/admin/panel\");\n    } else {\n      dispatch({\n        type: GET_ERRORS,\n        payload: {\n          adminLoginError: {\n            data: {\n              message: \"Access Denied\"\n            }\n          }\n        }\n      });\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: {\n      adminLoginError: err.response\n    }\n  })); // console.log(userData);\n};\nexport const physicianProfileUpdate = userData => dispatch => {\n  axios.put(`${proxy}/updatephysician`, userData).then(res => alert(\"Physician Profile Updated\")).catch(err => alert(err.response.data.message)); // console.log(userData);\n};\nexport const patientProfileUpdate = userData => dispatch => {\n  axios.put(`${proxy}/addpatientdetails`, userData).then(res => alert(\"Patient Profile Updated\")).catch(err => alert(err.response.data.message)); // console.log(userData);\n};\nexport const updatePatientInsurance = userData => dispatch => {\n  axios.put(`${proxy}/addpatientinsurancedetails`, userData).then(res => alert(\"Insurance updated\")).catch(err => alert(err.response.message));\n}; // gets the patient record including the physician they have selected\n\nexport const getMedicalRecord = (recordId, role, history) => dispatch => {\n  axios.get(`${proxy}/getamedicalrecord/?medicalRecordId=${recordId}`).then(res => dispatch({\n    type: GET_MEDICAL_RECORD,\n    payload: {\n      data: res.data,\n      role: role\n    }\n  })).then(res => history.push(\"/profile/patient/data\", {\n    state: recordId,\n    role: role\n  })).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err\n  }));\n}; // gets patient detail with id including medical treatment\n\nexport const getPatientWithId = (patientId, recordId, history) => dispatch => {\n  axios.get(`${proxy}/getpatientDetails/?patientid=${patientId}`).then(res => dispatch({\n    type: GET_PATIENT_INFORMATION_WITH_ID,\n    payload: res.data\n  })).then(res => history.push(\"/physician/patient/treatment\", {\n    pId: patientId,\n    rId: recordId\n  })).catch(err => alert(err.response.data.message));\n};\nexport const selectedRecordId = recordId => dispatch => {\n  dispatch({\n    type: SELECTED_RECORD_ID,\n    payload: recordId\n  });\n};\nexport const getMedicalRecordWithId = (recordId, history) => dispatch => {\n  axios.get(`${proxy}/getmedicalrecordbyid/?medicalid=${recordId}`).then(res => dispatch({\n    type: GET_MEDICAL_RECORD_WITH_ID,\n    payload: res.data\n  })).then(res => history.push(\"/physician/patient/record\", {\n    id: recordId\n  })).catch(err => alert(err.response.data.message));\n};","map":{"version":3,"sources":["C:/Users/jonas/Desktop/HCIS/frontend/src/actions/index.js"],"names":["axios","GET_MEDICAL_RECORD_WITH_ID","SELECTED_RECORD_ID","GET_PATIENT_INFORMATION_WITH_ID","SET_CURRENT_USER","GET_ERRORS","SET_CURRENT_USER_INSURANCE","GET_MEDICAL_RECORD","setAuthToken","proxy","patientLogin","userData","history","dispatch","post","then","res","data","role","token","jwt","localStorage","setItem","push","type","payload","patientLoginError","message","catch","err","response","getCurrentPatient","get","getCurrentPatientInsurance","logoutUser","removeItem","patientRegister","patientRegisterError","physicianLogin","physicianLoginError","physicianRegister","physicianRegisterError","getCurrentPhysician","adminLogin","adminLoginError","physicianProfileUpdate","put","alert","patientProfileUpdate","updatePatientInsurance","getMedicalRecord","recordId","state","getPatientWithId","patientId","pId","rId","selectedRecordId","getMedicalRecordWithId","id"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  GET_MEDICAL_RECORD_WITH_ID,\n  SELECTED_RECORD_ID,\n  GET_PATIENT_INFORMATION_WITH_ID,\n  SET_CURRENT_USER,\n  GET_ERRORS,\n  SET_CURRENT_USER_INSURANCE,\n  GET_MEDICAL_RECORD\n} from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\nexport const proxy = \"http://localhost:8080\";\nexport const patientLogin = (userData, history) => dispatch => {\n  // console.log(userData);\n  axios\n    .post(`${proxy}/authenticate`, userData)\n    .then(res => {\n      // console.log(res.data);\n      if (res.data.role === \"PATIENT\") {\n        const token = `Bearer ${res.data.jwt}`;\n        const role = res.data.role;\n        localStorage.setItem(\"jwtToken\", token);\n        localStorage.setItem(\"userRole\", role);\n        setAuthToken(token);\n        history.push(\"/patient/profile\");\n      } else {\n        dispatch({\n          type: GET_ERRORS,\n          payload: { patientLoginError: { data: { message: \"Access Denied\" } } }\n        });\n      }\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: { patientLoginError: err.response }\n      })\n    );\n};\n\n//gets the current logged in patient\nexport const getCurrentPatient = () => dispatch => {\n  axios\n    .get(`${proxy}/getpatientdetails`)\n    .then(res =>\n      dispatch({\n        type: SET_CURRENT_USER,\n        payload: res.data\n      })\n    )\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err\n      })\n    );\n};\n//gets the current logged in patients insurance\nexport const getCurrentPatientInsurance = () => dispatch => {\n  axios\n    .get(`${proxy}/getpatientinsurancedetails`)\n    .then(res =>\n      dispatch({\n        type: SET_CURRENT_USER_INSURANCE,\n        payload: res.data\n      })\n    )\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err\n      })\n    );\n};\n// user logoutUser\nexport const logoutUser = history => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  localStorage.removeItem(\"userRole\");\n  setAuthToken(false);\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: {}\n  });\n  dispatch({\n    type: GET_ERRORS,\n    payload: {}\n  });\n  history.push(\"/\");\n};\n\nexport const patientRegister = (userData, history) => dispatch => {\n  axios\n    .post(`${proxy}/register/patientregister`, userData)\n    .then(res => history.push(\"/patient/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: { patientRegisterError: err.response }\n      })\n    );\n};\n\nexport const physicianLogin = (userData, history) => dispatch => {\n  // console.log(userData);\n  axios\n    .post(`${proxy}/authenticate`, userData)\n    .then(res => {\n      if (res.data.role === \"PHYSICIAN\") {\n        const token = `Bearer ${res.data.jwt}`;\n        const role = res.data.role;\n        localStorage.setItem(\"jwtToken\", token);\n        localStorage.setItem(\"userRole\", role);\n        setAuthToken(token);\n        history.push(\"/physician/profile\");\n      } else {\n        dispatch({\n          type: GET_ERRORS,\n          payload: {\n            physicianLoginError: { data: { message: \"Access Denied\" } }\n          }\n        });\n      }\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: { patientLoginError: err.response }\n      })\n    );\n};\n\nexport const physicianRegister = (userData, history) => dispatch => {\n  // console.log(userData);\n  axios\n    .post(`${proxy}/createPhysician`, userData)\n    .then(res => history.push(\"/admin/panel\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: { physicianRegisterError: err.response }\n      })\n    );\n};\n\n// get current physician details\n\nexport const getCurrentPhysician = () => dispatch => {\n  axios\n    .get(`${proxy}/getphysiciandetail`)\n    .then(res =>\n      dispatch({\n        type: SET_CURRENT_USER,\n        payload: res.data\n      })\n    )\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err\n      })\n    );\n};\n\nexport const adminLogin = (userData, history) => dispatch => {\n  axios\n    .post(`${proxy}/authenticate`, userData)\n    .then(res => {\n      if (res.data.role === \"ADMIN\") {\n        const token = `Bearer ${res.data.jwt}`;\n        const role = res.data.role;\n        localStorage.setItem(\"jwtToken\", token);\n        localStorage.setItem(\"userRole\", role);\n        setAuthToken(token);\n        history.push(\"/admin/panel\");\n      } else {\n        dispatch({\n          type: GET_ERRORS,\n          payload: { adminLoginError: { data: { message: \"Access Denied\" } } }\n        });\n      }\n    })\n    .catch(err =>\n      dispatch({ type: GET_ERRORS, payload: { adminLoginError: err.response } })\n    );\n  // console.log(userData);\n};\nexport const physicianProfileUpdate = userData => dispatch => {\n  axios\n    .put(`${proxy}/updatephysician`, userData)\n    .then(res => alert(\"Physician Profile Updated\"))\n    .catch(err => alert(err.response.data.message));\n  // console.log(userData);\n};\n\nexport const patientProfileUpdate = userData => dispatch => {\n  axios\n    .put(`${proxy}/addpatientdetails`, userData)\n    .then(res => alert(\"Patient Profile Updated\"))\n    .catch(err => alert(err.response.data.message));\n  // console.log(userData);\n};\n\nexport const updatePatientInsurance = userData => dispatch => {\n  axios\n    .put(`${proxy}/addpatientinsurancedetails`, userData)\n    .then(res => alert(\"Insurance updated\"))\n    .catch(err => alert(err.response.message));\n};\n\n// gets the patient record including the physician they have selected\nexport const getMedicalRecord = (recordId, role, history) => dispatch => {\n  axios\n    .get(`${proxy}/getamedicalrecord/?medicalRecordId=${recordId}`)\n    .then(res =>\n      dispatch({\n        type: GET_MEDICAL_RECORD,\n        payload: { data: res.data, role: role }\n      })\n    )\n    .then(res =>\n      history.push(\"/profile/patient/data\", { state: recordId, role: role })\n    )\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err\n      })\n    );\n};\n\n// gets patient detail with id including medical treatment\nexport const getPatientWithId = (patientId, recordId, history) => dispatch => {\n  axios\n    .get(`${proxy}/getpatientDetails/?patientid=${patientId}`)\n    .then(res =>\n      dispatch({\n        type: GET_PATIENT_INFORMATION_WITH_ID,\n        payload: res.data\n      })\n    )\n    .then(res =>\n      history.push(\"/physician/patient/treatment\", {\n        pId: patientId,\n        rId: recordId\n      })\n    )\n    .catch(err => alert(err.response.data.message));\n};\n\nexport const selectedRecordId = recordId => dispatch => {\n  dispatch({\n    type: SELECTED_RECORD_ID,\n    payload: recordId\n  });\n};\n\nexport const getMedicalRecordWithId = (recordId, history) => dispatch => {\n  axios\n    .get(`${proxy}/getmedicalrecordbyid/?medicalid=${recordId}`)\n    .then(res =>\n      dispatch({\n        type: GET_MEDICAL_RECORD_WITH_ID,\n        payload: res.data\n      })\n    )\n    .then(res => history.push(\"/physician/patient/record\", { id: recordId }))\n    .catch(err => alert(err.response.data.message));\n};\n"]},"metadata":{},"sourceType":"module"}